name: Dependency Update

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        update-type: ['minor', 'patch']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create update branch
        run: |
          BRANCH_NAME="auto-update-dependencies-${{ matrix.update-type }}-$(date +%Y%m%d)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update dependencies (${{ matrix.update-type }})
        run: |
          if [ "${{ matrix.update-type }}" = "patch" ]; then
            composer update --prefer-dist --no-progress --with-dependencies --prefer-stable --optimize-autoloader
          else
            composer update --prefer-dist --no-progress --with-dependencies --prefer-stable --optimize-autoloader --with-all-dependencies
          fi

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet composer.lock; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Dependencies have been updated"
          fi

      - name: Run tests after update
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Install dev dependencies for testing
          composer install --prefer-dist --no-progress

          # Run unit tests
          if [ -f "vendor/bin/phpunit" ]; then
            vendor/bin/phpunit Test/Unit/ --no-coverage || exit 1
          fi

      - name: Generate update summary
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "## Dependency Updates (${{ matrix.update-type }})" > update-summary.md
          echo "" >> update-summary.md
          echo "### Updated Packages" >> update-summary.md
          echo "" >> update-summary.md

          # Get updated packages
          git diff HEAD~1 composer.lock | grep -E '^\+.*"name":|^\-.*"name":' | sed 's/[+-]//g' | sort | uniq > updated_packages.txt

          if [ -s updated_packages.txt ]; then
            echo "The following packages have been updated:" >> update-summary.md
            echo "" >> update-summary.md
            while IFS= read -r line; do
              package_name=$(echo "$line" | grep -o '"[^"]*"' | head -1 | tr -d '"')
              if [ ! -z "$package_name" ]; then
                echo "- $package_name" >> update-summary.md
              fi
            done < updated_packages.txt
          else
            echo "Package versions have been updated." >> update-summary.md
          fi

          echo "" >> update-summary.md
          echo "### Test Results" >> update-summary.md
          echo "✅ All unit tests passed after dependency updates" >> update-summary.md
          echo "" >> update-summary.md
          echo "### Security Check" >> update-summary.md

          # Run security check
          composer global require enlightn/security-checker
          if ~/.composer/vendor/bin/security-checker security:check composer.lock; then
            echo "✅ No security vulnerabilities detected" >> update-summary.md
          else
            echo "⚠️ Security vulnerabilities may exist - please review" >> update-summary.md
          fi

          echo "" >> update-summary.md
          echo "---" >> update-summary.md
          echo "*This PR was automatically created by the dependency update workflow*" >> update-summary.md

      - name: Commit changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add composer.lock
          git commit -m "chore: update ${{ matrix.update-type }} dependencies

          - Automated dependency update for ${{ matrix.update-type }} versions
          - All tests passing
          - Security check completed

          Generated by: ${{ github.workflow }} workflow"

      - name: Push branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "chore: update ${{ matrix.update-type }} dependencies"
          body-path: update-summary.md
          labels: |
            dependencies
            automated
            ${{ matrix.update-type }}-update
          draft: false
          delete-branch: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run security audit
        run: |
          composer global require enlightn/security-checker
          ~/.composer/vendor/bin/security-checker security:check composer.lock --format=json > security-report.json || true

      - name: Process security report
        run: |
          if [ -s security-report.json ]; then
            VULNERABILITIES=$(cat security-report.json | jq -r 'length')
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "## 🚨 Security Vulnerabilities Detected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Found $VULNERABILITIES security vulnerabilities in dependencies:" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              cat security-report.json | jq -r '.[] | "### " + .title + "\n" + "**Package:** " + .package + "\n" + "**Version:** " + .version + "\n" + "**CVE:** " + .cve + "\n" + "**Link:** " + .link + "\n"' >> $GITHUB_STEP_SUMMARY

              # Create issue for security vulnerabilities
              if [ "${{ secrets.GITHUB_TOKEN }}" != "" ]; then
                ISSUE_BODY=$(cat security-report.json | jq -r '"## Security Vulnerabilities Found\n\nThe following security vulnerabilities were detected in our dependencies:\n\n" + (.[] | "### " + .title + "\n- **Package:** " + .package + "\n- **Version:** " + .version + "\n- **CVE:** " + .cve + "\n- **Severity:** " + .severity + "\n- **Link:** " + .link + "\n") + "\n---\n*This issue was automatically created by the security audit workflow.*"')

                curl -X POST \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  https://api.github.com/repos/${{ github.repository }}/issues \
                  -d "{
                    \"title\": \"🚨 Security Vulnerabilities Found in Dependencies\",
                    \"body\": \"$ISSUE_BODY\",
                    \"labels\": [\"security\", \"dependencies\", \"high-priority\"]
                  }"
              fi

              exit 1
            else
              echo "✅ No security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ No security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi

  composer-audit:
    name: Composer Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Run Composer Audit
        run: |
          composer audit --format=json > composer-audit.json || true

          if [ -s composer-audit.json ]; then
            ADVISORIES=$(cat composer-audit.json | jq -r '.advisories | length // 0')
            if [ "$ADVISORIES" -gt 0 ]; then
              echo "## ⚠️ Composer Security Advisories" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Found $ADVISORIES security advisories:" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              cat composer-audit.json | jq -r '.advisories[] | "- **" + .packageName + "**: " + .title' >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security advisories found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ No security advisories found" >> $GITHUB_STEP_SUMMARY
          fi

  outdated-check:
    name: Check Outdated Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Check for outdated packages
        run: |
          echo "## 📦 Outdated Packages Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          composer outdated --direct --format=json > outdated.json || true

          if [ -s outdated.json ]; then
            OUTDATED_COUNT=$(cat outdated.json | jq -r '.installed | length // 0')
            if [ "$OUTDATED_COUNT" -gt 0 ]; then
              echo "### Direct Dependencies ($OUTDATED_COUNT outdated)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Package | Current | Latest | Description |" >> $GITHUB_STEP_SUMMARY
              echo "|---------|---------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
              cat outdated.json | jq -r '.installed[] | "| " + .name + " | " + .version + " | " + (.latest // "N/A") + " | " + (.description // "N/A") + " |"' >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ All direct dependencies are up to date" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ All packages are up to date" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-old-prs:
    name: Cleanup Old Dependency PRs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Close old dependency update PRs
        run: |
          # Close PRs older than 7 days with dependency label
          gh pr list --label "dependencies" --state open --json number,createdAt,title | \
          jq --raw-output '.[] | select((.createdAt | fromdateiso8601) < (now - (7 * 24 * 3600))) | .number' | \
          while read pr_number; do
            if [ ! -z "$pr_number" ]; then
              gh pr close "$pr_number" --comment "Closing outdated dependency update PR. A new one will be created in the next update cycle."
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [update-dependencies, security-audit, composer-audit, outdated-check, cleanup-old-prs]
    if: always()
    steps:
      - name: Generate final report
        run: |
          echo "## 🔄 Dependency Update Workflow Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Update Dependencies | ${{ needs.update-dependencies.result == 'success' && '✅ Success' || needs.update-dependencies.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Composer Audit | ${{ needs.composer-audit.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Outdated Check | ${{ needs.outdated-check.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cleanup Old PRs | ${{ needs.cleanup-old-prs.result == 'success' && '✅ Success' || '⚠️ Warning' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "⚠️ **Security issues detected!** Please review the security audit results." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.update-dependencies.result }}" == "success" ]]; then
            echo "✅ **All checks passed!** Dependency updates are ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No updates available** or workflow completed with warnings." >> $GITHUB_STEP_SUMMARY
          fi
