name: Documentation

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'
      - 'src/**/*.php'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'
      - 'src/**/*.php'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install markdown tools
        run: |
          npm install -g markdownlint-cli markdown-link-check textlint textlint-rule-max-ten

      - name: Lint Markdown files
        run: |
          markdownlint README.md CHANGELOG.md docs/**/*.md || true

      - name: Check markdown links
        run: |
          markdown-link-check README.md --config .github/markdown-link-check.json || true
          find docs -name "*.md" -exec markdown-link-check {} --config .github/markdown-link-check.json \; || true

      - name: Create markdown link check config
        run: |
          mkdir -p .github
          cat > .github/markdown-link-check.json << 'EOF'
          {
            "ignorePatterns": [
              {
                "pattern": "^http://localhost"
              },
              {
                "pattern": "^https://your-magento-store.com"
              }
            ],
            "httpHeaders": [
              {
                "urls": ["https://github.com"],
                "headers": {
                  "Accept": "text/html"
                }
              }
            ],
            "timeout": "10s",
            "retryOn429": true,
            "retryCount": 3,
            "fallbackHttpStatus": [400, 401, 403, 404, 500, 502, 503, 504]
          }
          EOF

      - name: Validate README structure
        run: |
          echo "## README Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for required sections
          REQUIRED_SECTIONS=("Installation" "Configuration" "Usage" "Contributing" "License")
          MISSING_SECTIONS=()

          for section in "${REQUIRED_SECTIONS[@]}"; do
            if ! grep -q "## .*$section" README.md; then
              MISSING_SECTIONS+=("$section")
            fi
          done

          if [ ${#MISSING_SECTIONS[@]} -eq 0 ]; then
            echo "✅ All required sections present in README" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Missing sections in README:" >> $GITHUB_STEP_SUMMARY
            for section in "${MISSING_SECTIONS[@]}"; do
              echo "- $section" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: Check documentation completeness
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Documentation Completeness" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count total lines in README
          README_LINES=$(wc -l < README.md)
          echo "📄 README.md: $README_LINES lines" >> $GITHUB_STEP_SUMMARY

          # Check for code examples
          CODE_BLOCKS=$(grep -c '```' README.md || echo 0)
          echo "💻 Code examples: $((CODE_BLOCKS / 2))" >> $GITHUB_STEP_SUMMARY

          # Check for images/badges
          IMAGES=$(grep -c '!\[' README.md || echo 0)
          echo "🖼️ Images/badges: $IMAGES" >> $GITHUB_STEP_SUMMARY

  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Install phpDocumentor
        run: |
          wget https://phpdoc.org/phpDocumentor.phar
          chmod +x phpDocumentor.phar

      - name: Generate API documentation
        run: |
          mkdir -p docs/api
          ./phpDocumentor.phar run -d src/ -t docs/api/ --title "Magento 2 Prometheus Exporter API" || true

      - name: Upload API docs artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-documentation
          path: docs/api/
          retention-days: 30

  check-changelog:
    name: Check Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if CHANGELOG.md was updated
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "CHANGELOG.md"; then
            echo "✅ CHANGELOG.md has been updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ CHANGELOG.md was not updated in this PR" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Consider adding an entry to CHANGELOG.md if this PR includes:" >> $GITHUB_STEP_SUMMARY
            echo "- New features" >> $GITHUB_STEP_SUMMARY
            echo "- Bug fixes" >> $GITHUB_STEP_SUMMARY
            echo "- Breaking changes" >> $GITHUB_STEP_SUMMARY
            echo "- Important updates" >> $GITHUB_STEP_SUMMARY
          fi

  validate-changelog:
    name: Validate Changelog Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate changelog format
        run: |
          echo "## Changelog Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md file not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check for "Unreleased" section
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "✅ Unreleased section found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No Unreleased section found in CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for proper version format
          VERSION_COUNT=$(grep -c "## \[[0-9]\+\.[0-9]\+\.[0-9]\+\]" CHANGELOG.md || echo 0)
          echo "📋 Found $VERSION_COUNT versioned entries" >> $GITHUB_STEP_SUMMARY

          # Check for dates in changelog entries
          DATED_ENTRIES=$(grep -c "## \[.*\] - [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}" CHANGELOG.md || echo 0)
          echo "📅 Found $DATED_ENTRIES entries with dates" >> $GITHUB_STEP_SUMMARY

  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install aspell
        run: |
          sudo apt-get update
          sudo apt-get install -y aspell aspell-en

      - name: Create custom dictionary
        run: |
          cat > .aspell.en.pws << 'EOF'
          personal_ws-1.1 en 100
          Magento
          magento
          Prometheus
          prometheus
          exporter
          phpunit
          PHPUnit
          Packagist
          packagist
          Codecov
          codecov
          GitLab
          GitHub
          workflow
          workflows
          middleware
          namespace
          namespaces
          Grafana
          grafana
          API
          APIs
          JSON
          json
          YAML
          yaml
          OAuth
          HTTP
          HTTPS
          URL
          URLs
          cron
          cronjob
          cronjobs
          admin
          frontend
          backend
          PSR
          autoloader
          autoloading
          EOF

      - name: Spell check documentation
        run: |
          echo "## Spell Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          MISSPELLED_FILES=()

          for file in README.md CHANGELOG.md docs/**/*.md; do
            if [ -f "$file" ]; then
              # Remove code blocks and URLs before spell checking
              cat "$file" | \
                sed '/```/,/```/d' | \
                sed 's/http[s]\?:\/\/[^ ]*//g' | \
                sed 's/`[^`]*`//g' | \
                aspell --personal=./.aspell.en.pws --mode=markdown list > "${file}.misspelled" 2>/dev/null || true

              if [ -s "${file}.misspelled" ]; then
                MISSPELLED_FILES+=("$file")
                echo "### $file" >> $GITHUB_STEP_SUMMARY
                echo "Possible misspellings:" >> $GITHUB_STEP_SUMMARY
                sort "${file}.misspelled" | uniq | head -20 | while read word; do
                  echo "- $word" >> $GITHUB_STEP_SUMMARY
                done
                echo "" >> $GITHUB_STEP_SUMMARY
              fi

              rm -f "${file}.misspelled"
            fi
          done

          if [ ${#MISSPELLED_FILES[@]} -eq 0 ]; then
            echo "✅ No spelling issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Possible spelling issues found in ${#MISSPELLED_FILES[@]} files" >> $GITHUB_STEP_SUMMARY
          fi

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [validate-docs, generate-api-docs]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Generate metrics documentation
        run: |
          mkdir -p docs/metrics

          # Generate metrics list from aggregators
          cat > docs/metrics/available-metrics.md << 'EOF'
          # Available Metrics

          This document lists all metrics available in the Magento 2 Prometheus Exporter.

          ## Automatically Generated Metrics

          EOF

          # Find all aggregator classes and extract metric information
          find src/ -name "*Aggregator.php" -type f | while read file; do
            class_name=$(basename "$file" .php)
            echo "### $class_name" >> docs/metrics/available-metrics.md
            echo "" >> docs/metrics/available-metrics.md
            echo "Source: \`$file\`" >> docs/metrics/available-metrics.md
            echo "" >> docs/metrics/available-metrics.md

            # Extract metric codes from the file
            grep -o "'[a-zA-Z_]*'" "$file" | grep -E "'[a-z_]+_(count|total|seconds|gauge)'" | sort | uniq | while read metric; do
              metric_clean=$(echo "$metric" | tr -d "'")
              echo "- \`$metric_clean\`" >> docs/metrics/available-metrics.md
            done
            echo "" >> docs/metrics/available-metrics.md
          done

          echo "*Last updated: $(date)*" >> docs/metrics/available-metrics.md

      - name: Generate configuration documentation
        run: |
          mkdir -p docs/configuration

          cat > docs/configuration/admin-settings.md << 'EOF'
          # Admin Configuration

          This document describes the configuration options available in the Magento 2 admin interface.

          ## Configuration Path

          Navigate to: **Stores → Configuration → Services → Prometheus Exporter**

          ## Available Settings

          ### General Settings

          - **Enable Module**: Enable/disable the Prometheus exporter
          - **Authentication Token**: Bearer token for securing the metrics endpoint
          - **Metric Collection Interval**: How often metrics are collected (in minutes)

          ### Metric Configuration

          Each metric type can be individually enabled or disabled:

          EOF

          # Add metric configuration details
          echo "- Order Metrics" >> docs/configuration/admin-settings.md
          echo "- Product Metrics" >> docs/configuration/admin-settings.md
          echo "- Customer Metrics" >> docs/configuration/admin-settings.md
          echo "- System Metrics" >> docs/configuration/admin-settings.md
          echo "- CMS Metrics" >> docs/configuration/admin-settings.md
          echo "" >> docs/configuration/admin-settings.md
          echo "*Configuration details are managed through Magento's system configuration.*" >> docs/configuration/admin-settings.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git diff --staged --quiet || git commit -m "docs: auto-update generated documentation

          - Updated metrics documentation
          - Updated configuration documentation
          - Generated from latest source code

          [skip ci]"
          git push

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [validate-docs, generate-api-docs, update-docs]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download API docs
        uses: actions/download-artifact@v3
        with:
          name: api-documentation
          path: docs/api/

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Build documentation site
        run: |
          mkdir -p _site
          cp -r docs/* _site/
          cp README.md _site/index.md

          # Create a simple index page
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Magento 2 Prometheus Exporter Documentation</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  .section { margin: 20px 0; }
                  a { color: #0066cc; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>Magento 2 Prometheus Exporter Documentation</h1>
              <div class="section">
                  <h2>Documentation Sections</h2>
                  <ul>
                      <li><a href="metrics/available-metrics.html">Available Metrics</a></li>
                      <li><a href="configuration/admin-settings.html">Admin Configuration</a></li>
                      <li><a href="api/">API Documentation</a></li>
                  </ul>
              </div>
              <div class="section">
                  <h2>Quick Links</h2>
                  <ul>
                      <li><a href="https://github.com/run-as-root/magento2-prometheus-exporter">GitHub Repository</a></li>
                      <li><a href="https://packagist.org/packages/run_as_root/magento2-prometheus-exporter">Packagist</a></li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: _site/

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  generate-summary:
    name: Generate Documentation Summary
    runs-on: ubuntu-latest
    needs: [validate-docs, generate-api-docs, check-changelog, validate-changelog, spell-check]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 📚 Documentation Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validate Docs | ${{ needs.validate-docs.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Generate API Docs | ${{ needs.generate-api-docs.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Check Changelog | ${{ needs.check-changelog.result == 'success' && '✅ Pass' || needs.check-changelog.result == 'skipped' && '⏭️ Skipped' || '⚠️ Warning' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validate Changelog | ${{ needs.validate-changelog.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Spell Check | ${{ needs.spell-check.result == 'success' && '✅ Pass' || '⚠️ Warning' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.validate-docs.result }}" == "success" && "${{ needs.generate-api-docs.result }}" == "success" && "${{ needs.validate-changelog.result }}" == "success" ]]; then
            echo "🎉 **All documentation checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some documentation checks failed.** Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi
