name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  php-cs-fixer:
    name: PHP CS Fixer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer, cs2pr

      - name: Create PHP CS Fixer config
        run: |
          cat > .php-cs-fixer.php << 'EOF'
          <?php
          $finder = PhpCsFixer\Finder::create()
              ->in(__DIR__ . '/src')
              ->in(__DIR__ . '/lib')
              ->in(__DIR__ . '/Test')
              ->name('*.php')
              ->exclude(['build', 'vendor']);

          $config = new PhpCsFixer\Config();
          return $config
              ->setRules([
                  '@PSR12' => true,
                  'array_syntax' => ['syntax' => 'short'],
                  'binary_operator_spaces' => true,
                  'concat_space' => ['spacing' => 'one'],
                  'no_unused_imports' => true,
                  'single_quote' => true,
                  'trailing_comma_in_multiline' => true,
              ])
              ->setFinder($finder);
          EOF

      - name: Install PHP CS Fixer
        run: composer global require friendsofphp/php-cs-fixer

      - name: Run PHP CS Fixer
        run: |
          ~/.composer/vendor/bin/php-cs-fixer fix --dry-run --diff --format=checkstyle | cs2pr
        continue-on-error: true

  phpstan:
    name: PHPStan Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer

      - name: Create PHPStan config
        run: |
          cat > phpstan.neon << 'EOF'
          parameters:
              level: 3
              paths:
                  - src
                  - lib
              ignoreErrors:
                  - '#Call to an undefined method.*#'
                  - '#Access to an undefined property.*#'
                  - '#Cannot call method.*on.*#'
                  - '#Magento\\.*#'
              excludePaths:
                  - */Test/*
                  - */build/*
                  - */vendor/*
              checkMissingIterableValueType: false
              checkGenericClassInNonGenericObjectType: false
          EOF

      - name: Install PHPStan
        run: composer global require phpstan/phpstan

      - name: Run PHPStan
        run: |
          ~/.composer/vendor/bin/phpstan analyse --no-progress --error-format=github
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["7.4", "8.0", "8.1", "8.2"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: bcmath, ctype, curl, dom, hash, iconv, intl, mbstring, openssl, pdo_mysql, simplexml, soap, xsl, zip
          tools: composer
          coverage: xdebug

      - name: Create minimal composer.json for testing
        run: |
          cat > composer-test.json << 'EOF'
          {
              "name": "run_as_root/magento2-prometheus-exporter-test",
              "type": "project",
              "require": {
                  "phpunit/phpunit": "^9.0"
              },
              "require-dev": {
                  "phpunit/phpunit": "^9.0"
              },
              "autoload": {
                  "psr-4": {
                      "RunAsRoot\\PrometheusExporter\\": "src/",
                      "RunAsRoot\\NewRelicApi\\": "lib/",
                      "RunAsRoot\\PrometheusExporter\\Test\\": "Test/"
                  }
              },
              "minimum-stability": "dev",
              "prefer-stable": true
          }
          EOF

      - name: Install test dependencies
        run: composer install --no-progress --prefer-dist -o --working-dir=. --file=composer-test.json

      - name: Create PHPUnit config
        run: |
          cat > phpunit.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/9.3/phpunit.xsd"
                   bootstrap="vendor/autoload.php"
                   executionOrder="depends,defects"
                   forceCoversAnnotation="false"
                   beStrictAboutCoversAnnotation="true"
                   beStrictAboutOutputDuringTests="true"
                   beStrictAboutTodoAnnotatedTests="true"
                   convertDeprecationsToExceptions="true"
                   failOnRisky="true"
                   failOnWarning="true"
                   verbose="true">
              <testsuites>
                  <testsuite name="Unit">
                      <directory suffix="Test.php">./Test/Unit</directory>
                  </testsuite>
              </testsuites>
              <coverage processUncoveredFiles="true">
                  <include>
                      <directory suffix=".php">./src</directory>
                      <directory suffix=".php">./lib</directory>
                  </include>
                  <exclude>
                      <directory>./Test</directory>
                      <directory>./vendor</directory>
                  </exclude>
              </coverage>
          </phpunit>
          EOF

      - name: Run Unit Tests
        run: |
          if [ -d "Test/Unit" ] && [ "$(find Test/Unit -name '*.php' | wc -l)" -gt 0 ]; then
            vendor/bin/phpunit --configuration phpunit.xml --coverage-text --colors=never
          else
            echo "No unit tests found, skipping..."
          fi
        continue-on-error: true

  validate-composer:
    name: Validate Composer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer

      - name: Validate composer.json
        run: composer validate --no-check-all --no-check-lock

  syntax-check:
    name: PHP Syntax Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["7.4", "8.0", "8.1", "8.2"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Check PHP syntax
        run: |
          find src/ lib/ -name "*.php" -exec php -l {} \; > /dev/null
          echo "✅ PHP syntax check passed for PHP ${{ matrix.php-version }}"

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer

      - name: Create minimal composer.lock for security check
        run: |
          cat > composer-security.json << 'EOF'
          {
              "name": "security-check",
              "require": {
                  "symfony/console": "^5.0|^6.0",
                  "guzzlehttp/guzzle": "^7.0",
                  "monolog/monolog": "^2.0|^3.0",
                  "psr/log": "^1.0|^2.0|^3.0"
              }
          }
          EOF

          composer install --no-progress --prefer-dist --working-dir=. --file=composer-security.json

      - name: Security audit
        run: composer audit --working-dir=.
        continue-on-error: true

  code-quality-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs:
      [
        php-cs-fixer,
        phpstan,
        unit-tests,
        validate-composer,
        syntax-check,
        security-check,
      ]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🔍 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| PHP CS Fixer | ${{ needs.php-cs-fixer.result == 'success' && '✅ Pass' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PHPStan | ${{ needs.phpstan.result == 'success' && '✅ Pass' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Pass' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Composer Validation | ${{ needs.validate-composer.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Syntax Check | ${{ needs.syntax-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | ${{ needs.security-check.result == 'success' && '✅ Pass' || '⚠️ Vulnerabilities Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          CRITICAL_FAILURES=0
          if [[ "${{ needs.validate-composer.result }}" != "success" ]]; then
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          if [[ "${{ needs.syntax-check.result }}" != "success" ]]; then
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi

          if [ $CRITICAL_FAILURES -eq 0 ]; then
            echo "### ✅ Pipeline Status: PASSING" >> $GITHUB_STEP_SUMMARY
            echo "All critical checks passed. Code quality issues are non-blocking." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Pipeline Status: FAILING" >> $GITHUB_STEP_SUMMARY
            echo "$CRITICAL_FAILURES critical check(s) failed." >> $GITHUB_STEP_SUMMARY
          fi
