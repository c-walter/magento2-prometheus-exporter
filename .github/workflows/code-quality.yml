name: Code Quality

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  php-syntax-check:
    name: PHP Syntax Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["7.4", "8.0", "8.1", "8.2"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Check PHP syntax
        run: |
          find src/ lib/ -name "*.php" -exec php -l {} \;
          echo "✅ PHP syntax check passed for PHP ${{ matrix.php-version }}"

  phpstan-analysis:
    name: PHPStan Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer

      - name: Create PHPStan config
        run: |
          cat > phpstan.neon << 'EOF'
          parameters:
              level: 2
              paths:
                  - src
                  - lib
              ignoreErrors:
                  - '#Call to an undefined method.*#'
                  - '#Access to an undefined property.*#'
                  - '#Cannot call method.*on.*#'
                  - '#Class.*not found#'
                  - '#Interface.*not found#'
                  - '#Magento\\.*#'
              excludePaths:
                  - */Test/*
                  - */build/*
                  - */vendor/*
              checkMissingIterableValueType: false
              checkGenericClassInNonGenericObjectType: false
              reportUnmatchedIgnoredErrors: false
          EOF

      - name: Install PHPStan
        run: composer global require phpstan/phpstan

      - name: Run PHPStan
        run: |
          ~/.composer/vendor/bin/phpstan analyse --no-progress --error-format=github
        continue-on-error: true

  php-cs-fixer:
    name: PHP CS Fixer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer

      - name: Create PHP CS Fixer config
        run: |
          cat > .php-cs-fixer.php << 'EOF'
          <?php
          $finder = PhpCsFixer\Finder::create()
              ->in(__DIR__ . '/src')
              ->in(__DIR__ . '/lib')
              ->name('*.php')
              ->exclude(['build', 'vendor', 'Test']);

          $config = new PhpCsFixer\Config();
          return $config
              ->setRules([
                  '@PSR12' => true,
                  'array_syntax' => ['syntax' => 'short'],
                  'binary_operator_spaces' => true,
                  'concat_space' => ['spacing' => 'one'],
                  'no_unused_imports' => true,
                  'single_quote' => true,
                  'trailing_comma_in_multiline' => true,
                  'no_whitespace_in_blank_line' => true,
                  'ordered_imports' => true,
                  'return_type_declaration' => true,
              ])
              ->setFinder($finder);
          EOF

      - name: Install PHP CS Fixer
        run: composer global require friendsofphp/php-cs-fixer

      - name: Run PHP CS Fixer
        run: |
          ~/.composer/vendor/bin/php-cs-fixer fix --dry-run --diff --format=checkstyle > cs-fixer-report.xml || true
          if [ -s cs-fixer-report.xml ]; then
            echo "## 🔧 Code Style Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "PHP CS Fixer found formatting issues. Run the following command to fix them:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'composer global require friendsofphp/php-cs-fixer' >> $GITHUB_STEP_SUMMARY
            echo '~/.composer/vendor/bin/php-cs-fixer fix' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No code style issues found" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer

      - name: Create test composer.json for security audit
        run: |
          cat > composer-test.json << 'EOF'
          {
              "name": "security-test",
              "require": {
                  "symfony/console": "^5.0|^6.0",
                  "guzzlehttp/guzzle": "^7.0",
                  "monolog/monolog": "^2.0|^3.0",
                  "psr/log": "^1.0|^2.0|^3.0",
                  "laminas/laminas-http": "^2.15"
              },
              "minimum-stability": "stable"
          }
          EOF

      - name: Install dependencies for security check
        run: |
          composer install --no-progress --prefer-dist --working-dir=. --file=composer-test.json

      - name: Run security audit
        run: |
          composer audit --working-dir=. --format=json > security-report.json || true
          if [ -s security-report.json ]; then
            echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if grep -q '"advisories"' security-report.json; then
              echo "⚠️ Security advisories found. Please review the dependencies." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security advisories found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ Security audit completed successfully" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  code-complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer

      - name: Install PHPLOC
        run: composer global require phploc/phploc

      - name: Generate Code Metrics
        run: |
          echo "## 📊 Code Metrics Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Lines of Code Analysis" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ~/.composer/vendor/bin/phploc src/ lib/ --exclude=Test >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  file-structure-check:
    name: File Structure Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          echo "## 📁 File Structure Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          REQUIRED_FILES=("README.md" "LICENSE" "composer.json" "registration.php")
          MISSING_FILES=()

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done

          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "✅ All required files present" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Missing required files:" >> $GITHUB_STEP_SUMMARY
            for file in "${MISSING_FILES[@]}"; do
              echo "- $file" >> $GITHUB_STEP_SUMMARY
            done
          fi

          # Check directory structure
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Directory Structure" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tree -d -L 2 . || find . -type d -maxdepth 2 | sort >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  generate-quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs:
      [
        php-syntax-check,
        phpstan-analysis,
        php-cs-fixer,
        security-audit,
        code-complexity,
        file-structure-check,
      ]
    if: always()
    steps:
      - name: Generate Summary Report
        run: |
          echo "## 📋 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| PHP Syntax Check | ${{ needs.php-syntax-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PHPStan Analysis | ${{ needs.phpstan-analysis.result == 'success' && '✅ Pass' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PHP CS Fixer | ${{ needs.php-cs-fixer.result == 'success' && '✅ Pass' || '⚠️ Style Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Pass' || '⚠️ Review Needed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Complexity | ${{ needs.code-complexity.result == 'success' && '✅ Pass' || '⚠️ Review Needed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| File Structure | ${{ needs.file-structure-check.result == 'success' && '✅ Pass' || '❌ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count critical failures
          CRITICAL_FAILURES=0
          if [[ "${{ needs.php-syntax-check.result }}" != "success" ]]; then
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          if [[ "${{ needs.file-structure-check.result }}" != "success" ]]; then
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi

          if [ $CRITICAL_FAILURES -eq 0 ]; then
            echo "### ✅ Overall Status: GOOD" >> $GITHUB_STEP_SUMMARY
            echo "All critical checks passed. Some quality improvements may be recommended." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Overall Status: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "$CRITICAL_FAILURES critical issue(s) found that should be addressed." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Quick Fix Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To fix common issues, run these commands locally:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo '# Fix code style issues' >> $GITHUB_STEP_SUMMARY
          echo 'composer global require friendsofphp/php-cs-fixer' >> $GITHUB_STEP_SUMMARY
          echo '~/.composer/vendor/bin/php-cs-fixer fix' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Run static analysis' >> $GITHUB_STEP_SUMMARY
          echo 'composer global require phpstan/phpstan' >> $GITHUB_STEP_SUMMARY
          echo '~/.composer/vendor/bin/phpstan analyse src lib' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
