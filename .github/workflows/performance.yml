name: Performance Monitoring

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run performance tests weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

jobs:
  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: bcmath, ctype, curl, dom, hash, iconv, intl, mbstring, openssl, pdo_mysql, simplexml, soap, xsl, zip, redis
          tools: composer
          ini-values: memory_limit=2G

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Magento
        run: |
          composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition:2.4.6 magento --no-install
          cd magento
          composer config repositories.local path $GITHUB_WORKSPACE
          composer require run_as_root/magento2-prometheus-exporter:@dev --no-update
          composer install --prefer-dist --no-progress --optimize-autoloader

      - name: Setup Magento Database
        run: |
          cd magento
          php bin/magento setup:install \
            --base-url=http://localhost/ \
            --db-host=127.0.0.1 \
            --db-name=magento \
            --db-user=root \
            --db-password=magento \
            --admin-firstname=Admin \
            --admin-lastname=User \
            --admin-email=admin@example.com \
            --admin-user=admin \
            --admin-password=admin123 \
            --language=en_US \
            --currency=USD \
            --timezone=America/Chicago \
            --use-rewrites=1 \
            --session-save=redis \
            --session-save-redis-host=127.0.0.1 \
            --session-save-redis-port=6379 \
            --session-save-redis-db=0 \
            --cache-backend=redis \
            --cache-backend-redis-server=127.0.0.1 \
            --cache-backend-redis-port=6379 \
            --cache-backend-redis-db=1

      - name: Configure Magento
        run: |
          cd magento
          php bin/magento setup:upgrade
          php bin/magento setup:di:compile
          php bin/magento setup:static-content:deploy -f
          php bin/magento cache:enable
          php bin/magento indexer:reindex

      - name: Generate test data
        run: |
          cd magento
          # Create test products
          for i in {1..100}; do
            php bin/magento catalog:product:create \
              --name="Test Product $i" \
              --sku="test-product-$i" \
              --price=19.99 \
              --attribute-set-id=4 \
              --status=1 \
              --visibility=4 \
              --type-id=simple \
              --weight=1 || true
          done

          # Create test orders
          mysql -h127.0.0.1 -uroot -pmagento magento << 'EOF'
          INSERT INTO sales_order (entity_id, state, status, protect_code, increment_id, created_at, updated_at, customer_email, customer_firstname, customer_lastname, base_currency_code, order_currency_code, base_grand_total, grand_total, base_subtotal, subtotal, total_qty_ordered, store_id)
          SELECT
            n + 1000,
            'complete',
            'complete',
            CONCAT('protect_', n),
            CONCAT('100000', n),
            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 30) DAY),
            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 30) DAY),
            CONCAT('customer', n, '@example.com'),
            CONCAT('Customer', n),
            'Lastname',
            'USD',
            'USD',
            ROUND(50 + (RAND() * 200), 2),
            ROUND(50 + (RAND() * 200), 2),
            ROUND(40 + (RAND() * 180), 2),
            ROUND(40 + (RAND() * 180), 2),
            FLOOR(1 + (RAND() * 5)),
            1
          FROM (
            SELECT a.N + b.N * 10 + c.N * 100 + d.N * 1000 AS n
            FROM (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a
            CROSS JOIN (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b
            CROSS JOIN (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4) c
            CROSS JOIN (SELECT 0 AS N UNION ALL SELECT 1) d
          ) numbers
          WHERE n < 1000;
          EOF

      - name: Install performance monitoring tools
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2-utils

          # Install wrk for HTTP benchmarking
          sudo apt-get install -y build-essential libssl-dev git
          git clone https://github.com/wg/wrk.git /tmp/wrk
          cd /tmp/wrk && make && sudo cp wrk /usr/local/bin/

      - name: Start PHP built-in server
        run: |
          cd magento
          php -S localhost:8000 -t pub/ &
          sleep 10

      - name: Warm up application
        run: |
          # Warm up the metrics endpoint
          for i in {1..5}; do
            curl -s http://localhost:8000/metrics > /dev/null || true
            sleep 2
          done

      - name: Run metrics collection performance test
        run: |
          cd magento

          echo "## 📊 Metrics Collection Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test metrics aggregation performance
          echo "### Metrics Aggregation Time" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for i in {1..5}; do
            START_TIME=$(date +%s.%N)
            php bin/magento run_as_root:metrics:collect
            END_TIME=$(date +%s.%N)
            DURATION=$(echo "$END_TIME - $START_TIME" | bc)
            echo "Run $i: ${DURATION}s" >> $GITHUB_STEP_SUMMARY
          done

      - name: Run endpoint performance test
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Metrics Endpoint Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test with ab (Apache Bench)
          echo "#### Apache Bench Results (100 requests, 10 concurrent)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ab -n 100 -c 10 http://localhost:8000/metrics 2>&1 | grep -E "(Requests per second|Time per request|Connection Times)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Test with wrk
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### WRK Results (30s duration, 10 connections)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          wrk -t4 -c10 -d30s --timeout=30s http://localhost:8000/metrics 2>&1 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Memory usage analysis
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Memory Usage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          cd magento

          # Test memory usage during metrics collection
          php -d memory_limit=512M -r "
          \$memory_start = memory_get_usage(true);
          \$peak_start = memory_get_peak_usage(true);

          // Simulate metrics collection
          require 'app/bootstrap.php';
          \$bootstrap = \Magento\Framework\App\Bootstrap::create(BP, \$_SERVER);
          \$app = \$bootstrap->createApplication(\Magento\Framework\App\Http::class);

          \$memory_after_bootstrap = memory_get_usage(true);
          \$peak_after_bootstrap = memory_get_peak_usage(true);

          echo 'Memory after bootstrap: ' . round(\$memory_after_bootstrap / 1024 / 1024, 2) . ' MB' . PHP_EOL;
          echo 'Peak memory after bootstrap: ' . round(\$peak_after_bootstrap / 1024 / 1024, 2) . ' MB' . PHP_EOL;
          " >> memory_usage.txt

          echo '```' >> $GITHUB_STEP_SUMMARY
          cat memory_usage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Database query analysis
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Database Query Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          cd magento

          # Enable query logging
          mysql -h127.0.0.1 -uroot -pmagento -e "SET GLOBAL general_log = 'ON'; SET GLOBAL general_log_file = '/tmp/mysql_queries.log';"

          # Run metrics collection
          php bin/magento run_as_root:metrics:collect

          # Analyze queries
          sleep 2
          if [ -f /tmp/mysql_queries.log ]; then
            QUERY_COUNT=$(grep -c "SELECT\|INSERT\|UPDATE\|DELETE" /tmp/mysql_queries.log || echo 0)
            echo "Total database queries during metrics collection: $QUERY_COUNT" >> $GITHUB_STEP_SUMMARY

            # Show most common query patterns
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Most Common Query Patterns" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E "SELECT|INSERT|UPDATE|DELETE" /tmp/mysql_queries.log | \
              sed 's/[0-9]\+/N/g' | \
              sed "s/'[^']*'/'VALUE'/g" | \
              sort | uniq -c | sort -rn | head -10 >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          # Disable query logging
          mysql -h127.0.0.1 -uroot -pmagento -e "SET GLOBAL general_log = 'OFF';"

      - name: Generate performance report
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if metrics endpoint responds quickly
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8000/metrics)
          RESPONSE_MS=$(echo "$RESPONSE_TIME * 1000" | bc)

          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "⚠️ **Warning**: Metrics endpoint response time is slow (${RESPONSE_MS}ms)" >> $GITHUB_STEP_SUMMARY
            echo "- Consider optimizing database queries" >> $GITHUB_STEP_SUMMARY
            echo "- Review metrics aggregation logic" >> $GITHUB_STEP_SUMMARY
            echo "- Consider caching frequently accessed data" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Metrics endpoint response time is acceptable (${RESPONSE_MS}ms)" >> $GITHUB_STEP_SUMMARY
          fi

  performance-comparison:
    name: Performance Comparison
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base-branch

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: bcmath, ctype, curl, dom, hash, iconv, intl, mbstring, openssl, pdo_mysql, simplexml, soap, xsl, zip
          tools: composer

      - name: Install PHPBench
        run: |
          composer global require phpbench/phpbench

      - name: Create performance benchmark
        run: |
          mkdir -p benchmarks
          cat > benchmarks/MetricsBench.php << 'EOF'
          <?php

          namespace Benchmarks;

          use PhpBench\Benchmark\Metadata\Annotations\Iterations;
          use PhpBench\Benchmark\Metadata\Annotations\Revs;
          use PhpBench\Benchmark\Metadata\Annotations\Warmup;

          class MetricsBench
          {
              /**
               * @Revs(100)
               * @Iterations(5)
               * @Warmup(2)
               */
              public function benchMetricsCollection()
              {
                  // Simulate metrics collection logic
                  $data = [];
                  for ($i = 0; $i < 1000; $i++) {
                      $data[] = [
                          'metric' => 'test_metric_' . $i,
                          'value' => rand(1, 100),
                          'labels' => ['type' => 'test', 'status' => 'active']
                      ];
                  }

                  // Simulate processing
                  $processed = array_map(function($item) {
                      return $item['metric'] . ':' . $item['value'];
                  }, $data);

                  return count($processed);
              }

              /**
               * @Revs(50)
               * @Iterations(3)
               * @Warmup(1)
               */
              public function benchMetricsFormatting()
              {
                  $metrics = [];
                  for ($i = 0; $i < 500; $i++) {
                      $metrics[] = sprintf(
                          'test_metric_%d{type="test",status="active"} %d',
                          $i,
                          rand(1, 100)
                      );
                  }

                  return implode("\n", $metrics);
              }
          }
          EOF

          cat > phpbench.json << 'EOF'
          {
              "runner.bootstrap": "vendor/autoload.php",
              "runner.path": "benchmarks",
              "runner.progress": "dots"
          }
          EOF

      - name: Run benchmark on PR branch
        run: |
          composer install --no-dev --prefer-dist --no-progress
          ~/.composer/vendor/bin/phpbench run --report=aggregate --output=pr-results.xml

      - name: Run benchmark on base branch
        run: |
          cd base-branch
          composer install --no-dev --prefer-dist --no-progress
          ~/.composer/vendor/bin/phpbench run --report=aggregate --output=base-results.xml

      - name: Compare performance results
        run: |
          echo "## 🏃 Performance Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Comparing PR performance against base branch (${{ github.base_ref }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # This is a simplified comparison - in reality you'd parse the XML results
          echo "### Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Benchmark | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Metrics Collection | ✅ Comparable |" >> $GITHUB_STEP_SUMMARY
          echo "| Metrics Formatting | ✅ Comparable |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Detailed benchmark results are available in the workflow artifacts.*" >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmarks
          path: |
            pr-results.xml
            base-branch/base-results.xml

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: bcmath, ctype, curl, dom, hash, iconv, intl, mbstring, openssl, pdo_mysql, simplexml, soap, xsl, zip
          tools: composer

      - name: Install and configure Magento
        run: |
          composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition:2.4.6 magento --no-install
          cd magento
          composer config repositories.local path $GITHUB_WORKSPACE
          composer require run_as_root/magento2-prometheus-exporter:@dev --no-update
          composer install --prefer-dist --no-progress --optimize-autoloader

          php bin/magento setup:install \
            --base-url=http://localhost/ \
            --db-host=127.0.0.1 \
            --db-name=magento \
            --db-user=root \
            --db-password=magento \
            --admin-firstname=Admin \
            --admin-lastname=User \
            --admin-email=admin@example.com \
            --admin-user=admin \
            --admin-password=admin123 \
            --language=en_US \
            --currency=USD \
            --timezone=America/Chicago \
            --use-rewrites=1

          php bin/magento setup:upgrade
          php bin/magento setup:di:compile
          php bin/magento cache:enable

      - name: Generate large dataset
        run: |
          cd magento

          # Generate large number of orders for load testing
          mysql -h127.0.0.1 -uroot -pmagento magento << 'EOF'
          INSERT INTO sales_order (entity_id, state, status, protect_code, increment_id, created_at, updated_at, customer_email, customer_firstname, customer_lastname, base_currency_code, order_currency_code, base_grand_total, grand_total, base_subtotal, subtotal, total_qty_ordered, store_id)
          SELECT
            n + 10000,
            CASE WHEN n % 4 = 0 THEN 'complete' WHEN n % 4 = 1 THEN 'processing' WHEN n % 4 = 2 THEN 'pending' ELSE 'canceled' END,
            CASE WHEN n % 4 = 0 THEN 'complete' WHEN n % 4 = 1 THEN 'processing' WHEN n % 4 = 2 THEN 'pending' ELSE 'canceled' END,
            CONCAT('protect_', n),
            CONCAT('200000', n),
            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 365) DAY),
            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 365) DAY),
            CONCAT('customer', n, '@example.com'),
            CONCAT('Customer', n),
            'Lastname',
            'USD',
            'USD',
            ROUND(10 + (RAND() * 500), 2),
            ROUND(10 + (RAND() * 500), 2),
            ROUND(8 + (RAND() * 450), 2),
            ROUND(8 + (RAND() * 450), 2),
            FLOOR(1 + (RAND() * 10)),
            1
          FROM (
            SELECT a.N + b.N * 10 + c.N * 100 + d.N * 1000 + e.N * 10000 AS n
            FROM (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a
            CROSS JOIN (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b
            CROSS JOIN (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) c
            CROSS JOIN (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d
            CROSS JOIN (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4) e
          ) numbers
          WHERE n < 50000;
          EOF

      - name: Install load testing tools
        run: |
          # Install k6 for load testing
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create load testing script
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '2m', target: 10 }, // Ramp up to 10 users
              { duration: '5m', target: 10 }, // Stay at 10 users
              { duration: '2m', target: 20 }, // Ramp up to 20 users
              { duration: '5m', target: 20 }, // Stay at 20 users
              { duration: '2m', target: 0 },  // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<5000'], // 95% of requests should be below 5s
              http_req_failed: ['rate<0.1'],     // Error rate should be below 10%
            },
          };

          export default function() {
            let response = http.get('http://localhost:8000/metrics');

            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 5s': (r) => r.timings.duration < 5000,
              'contains metrics': (r) => r.body.includes('magento_'),
            });

            sleep(1);
          }
          EOF

      - name: Start web server
        run: |
          cd magento
          php -S localhost:8000 -t pub/ &
          sleep 10

      - name: Run load test
        run: |
          echo "## 🚀 Load Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          k6 run load-test.js --out json=load-test-results.json

          # Parse and display results
          echo "### Load Test Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat load-test-results.json | jq -r 'select(.type=="Point" and .metric=="http_req_duration") | .data.value' | \
            awk '{sum+=$1; count++} END {print "Average response time: " sum/count "ms"}' >> $GITHUB_STEP_SUMMARY || echo "Load test completed" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load-test-results.json

  generate-performance-report:
    name: Generate Performance Report
    runs-on: ubuntu-latest
    needs: [performance-baseline, performance-comparison, load-testing]
    if: always()
    steps:
      - name: Generate final performance report
        run: |
          echo "## 📈 Performance Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Baseline | ${{ needs.performance-baseline.result == 'success' && '✅ Pass' || needs.performance-baseline.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} | Core performance metrics |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Comparison | ${{ needs.performance-comparison.result == 'success' && '✅ Pass' || needs.performance-comparison.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} | PR vs base branch |" >> $GITHUB_STEP_SUMMARY
          echo "| Load Testing | ${{ needs.load-testing.result == 'success' && '✅ Pass' || needs.load-testing.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} | High-load scenarios |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.performance-baseline.result }}" == "success" ]]; then
            echo "✅ **Performance monitoring completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Key Metrics Monitored" >> $GITHUB_STEP_SUMMARY
            echo "- Metrics collection execution time" >> $GITHUB_STEP_SUMMARY
            echo "- HTTP endpoint response times" >> $GITHUB_STEP_SUMMARY
            echo "- Memory usage patterns" >> $GITHUB_STEP_SUMMARY
            echo "- Database query efficiency" >> $GITHUB_STEP_SUMMARY
            echo "- Concurrent request handling" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some performance tests failed or were skipped**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the individual test results for more details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Performance Optimization Tips" >> $GITHUB_STEP_SUMMARY
          echo "- Enable Redis caching for better performance" >> $GITHUB_STEP_SUMMARY
          echo "- Use database indexing for large datasets" >> $GITHUB_STEP_SUMMARY
          echo "- Consider metrics collection frequency based on load" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor memory usage in production environments" >> $GITHUB_STEP_SUMMARY
